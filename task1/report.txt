#1- super can use to define the parent you need to call even if you inherit from parent
#only and parent inherit from top parent you can use child to call top parent

class Human:
    name="marwa"
    makeFault=0
    def __init__(self,name):# constructor  definition
        self.name=name
        print("i am",name)

    def speak(self):
        print("my name is",self.name)    
    @classmethod 
    def fault(cls):
        cls.makeFault+=1
        print(cls.makeFault)
    @staticmethod
    def measuretmp(temp):
        if(temp ==37):
            return 'normal'
        return 'not normal'

class Employee(Human):
    def __init__(self,name,salary):
        print("child \n")
        super(Employee,self).__init__(name)
        self.salary=salary
    def work(self):
        print("njggfgfghjk")

class Employee2(Employee):
    def __init__(self,name,salary):
        super(Employee,self).__init__(name)
        print("child2 \n")
        self.salary=salary
    def work(self):
        print("njggfgfghjk") 
#emp=Employee("marwa",500)
emp2=Employee2("marwa",500)





----------------------------------------------------------------------------
2- multiple inheritane

class Human:
    def __init__(self):
        print("constructor_one")

    def eat(self):
        print("human");

    # def eat(self,i):
    #     print("human2",i);    
    pass       

class Mammal:
    def __init__(self):
        print("constructor_two")

    def eat(self):
        print("Mammal");
    pass       
#first case :output
# constructor_one
#constructor_two
# Mammal
class Emp(Mammal,Human) :
    def __init__(self):
        Human.__init__(self)
        Mammal.__init__(self)
    pass   

#second case :output 
#  constructor_one
#constructor_two
# Human
# class Emp(Human,Mammal) :
#     def __init__(self):
#         Human.__init__(self)
#         Mammal.__init__(self)

    #if  methods have the same name it will return first left class
    pass 

e=Emp();
e.eat()

------------------------------------------------


# There is no method overloading in python. You can however use default arguments,
class Human:
 
    def welcome(self, name=None):
 
        if name is not None:
            print 'Hello ' + name
        else:
            print 'Hello '
 

obj = Human()
 
obj.welcome()
 
obj.welcome('marwa')




















